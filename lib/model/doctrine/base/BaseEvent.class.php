<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Event', 'doctrine');

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property enum $type
 * @property integer $activity_id
 * @property integer $person_responsible_id
 * @property string $purpose
 * @property string $description
 * @property integer $institute_id
 * @property string $place
 * @property date $date
 * @property integer $duration
 * @property timestamp $registration_open_time
 * @property timestamp $registration_close_time
 * @property string $nice_name_1
 * @property string $host_website_1
 * @property string $nice_name_2
 * @property string $host_website_2
 * @property boolean $is_news
 * @property boolean $is_important
 * @property Activity $Activity
 * @property Institute $Institute
 * @property Person $Person
 * @property Doctrine_Collection $EventPerson
 * 
 * @method integer             getId()                      Returns the current record's "id" value
 * @method string              getName()                    Returns the current record's "name" value
 * @method enum                getType()                    Returns the current record's "type" value
 * @method integer             getActivityId()              Returns the current record's "activity_id" value
 * @method integer             getPersonResponsibleId()     Returns the current record's "person_responsible_id" value
 * @method string              getPurpose()                 Returns the current record's "purpose" value
 * @method string              getDescription()             Returns the current record's "description" value
 * @method integer             getInstituteId()             Returns the current record's "institute_id" value
 * @method string              getPlace()                   Returns the current record's "place" value
 * @method date                getDate()                    Returns the current record's "date" value
 * @method integer             getDuration()                Returns the current record's "duration" value
 * @method timestamp           getRegistrationOpenTime()    Returns the current record's "registration_open_time" value
 * @method timestamp           getRegistrationCloseTime()   Returns the current record's "registration_close_time" value
 * @method string              getNiceName1()               Returns the current record's "nice_name_1" value
 * @method string              getHostWebsite1()            Returns the current record's "host_website_1" value
 * @method string              getNiceName2()               Returns the current record's "nice_name_2" value
 * @method string              getHostWebsite2()            Returns the current record's "host_website_2" value
 * @method boolean             getIsNews()                  Returns the current record's "is_news" value
 * @method boolean             getIsImportant()             Returns the current record's "is_important" value
 * @method Activity            getActivity()                Returns the current record's "Activity" value
 * @method Institute           getInstitute()               Returns the current record's "Institute" value
 * @method Person              getPerson()                  Returns the current record's "Person" value
 * @method Doctrine_Collection getEventPerson()             Returns the current record's "EventPerson" collection
 * @method Event               setId()                      Sets the current record's "id" value
 * @method Event               setName()                    Sets the current record's "name" value
 * @method Event               setType()                    Sets the current record's "type" value
 * @method Event               setActivityId()              Sets the current record's "activity_id" value
 * @method Event               setPersonResponsibleId()     Sets the current record's "person_responsible_id" value
 * @method Event               setPurpose()                 Sets the current record's "purpose" value
 * @method Event               setDescription()             Sets the current record's "description" value
 * @method Event               setInstituteId()             Sets the current record's "institute_id" value
 * @method Event               setPlace()                   Sets the current record's "place" value
 * @method Event               setDate()                    Sets the current record's "date" value
 * @method Event               setDuration()                Sets the current record's "duration" value
 * @method Event               setRegistrationOpenTime()    Sets the current record's "registration_open_time" value
 * @method Event               setRegistrationCloseTime()   Sets the current record's "registration_close_time" value
 * @method Event               setNiceName1()               Sets the current record's "nice_name_1" value
 * @method Event               setHostWebsite1()            Sets the current record's "host_website_1" value
 * @method Event               setNiceName2()               Sets the current record's "nice_name_2" value
 * @method Event               setHostWebsite2()            Sets the current record's "host_website_2" value
 * @method Event               setIsNews()                  Sets the current record's "is_news" value
 * @method Event               setIsImportant()             Sets the current record's "is_important" value
 * @method Event               setActivity()                Sets the current record's "Activity" value
 * @method Event               setInstitute()               Sets the current record's "Institute" value
 * @method Event               setPerson()                  Sets the current record's "Person" value
 * @method Event               setEventPerson()             Sets the current record's "EventPerson" collection
 * 
 * @package    gwis
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('type', 'enum', 7, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'News',
              1 => 'Call',
              2 => 'Meeting',
             ),
             'primary' => false,
             'default' => 'News',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 7,
             ));
        $this->hasColumn('activity_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('person_responsible_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('purpose', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('institute_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('place', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('date', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('duration', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('registration_open_time', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('registration_close_time', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('nice_name_1', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('host_website_1', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('nice_name_2', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('host_website_2', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('is_news', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '1',
             'notnull' => false,
             'autoincrement' => false,
             ));
        $this->hasColumn('is_important', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Activity', array(
             'local' => 'activity_id',
             'foreign' => 'id'));

        $this->hasOne('Institute', array(
             'local' => 'institute_id',
             'foreign' => 'id'));

        $this->hasOne('Person', array(
             'local' => 'person_responsible_id',
             'foreign' => 'id'));

        $this->hasMany('EventPerson', array(
             'local' => 'id',
             'foreign' => 'event_id'));
    }
}