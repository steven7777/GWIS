<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Node', 'doctrine');

/**
 * BaseNode
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $num
 * @property string $name
 * @property string $url
 * @property Doctrine_Collection $Institute
 * @property Doctrine_Collection $NodePdsnode
 * @property Doctrine_Collection $NodeSciencecase
 * @property Doctrine_Collection $Person
 * @property Doctrine_Collection $Person_5
 * @property Doctrine_Collection $Resource
 * @property Doctrine_Collection $Resource_7
 * @property Doctrine_Collection $ResourceNode
 * @property Doctrine_Collection $Sciencecase
 * 
 * @method integer             getId()              Returns the current record's "id" value
 * @method integer             getNum()             Returns the current record's "num" value
 * @method string              getName()            Returns the current record's "name" value
 * @method string              getUrl()             Returns the current record's "url" value
 * @method Doctrine_Collection getInstitute()       Returns the current record's "Institute" collection
 * @method Doctrine_Collection getNodePdsnode()     Returns the current record's "NodePdsnode" collection
 * @method Doctrine_Collection getNodeSciencecase() Returns the current record's "NodeSciencecase" collection
 * @method Doctrine_Collection getPerson()          Returns the current record's "Person" collection
 * @method Doctrine_Collection getPerson5()         Returns the current record's "Person_5" collection
 * @method Doctrine_Collection getResource()        Returns the current record's "Resource" collection
 * @method Doctrine_Collection getResource7()       Returns the current record's "Resource_7" collection
 * @method Doctrine_Collection getResourceNode()    Returns the current record's "ResourceNode" collection
 * @method Doctrine_Collection getSciencecase()     Returns the current record's "Sciencecase" collection
 * @method Node                setId()              Sets the current record's "id" value
 * @method Node                setNum()             Sets the current record's "num" value
 * @method Node                setName()            Sets the current record's "name" value
 * @method Node                setUrl()             Sets the current record's "url" value
 * @method Node                setInstitute()       Sets the current record's "Institute" collection
 * @method Node                setNodePdsnode()     Sets the current record's "NodePdsnode" collection
 * @method Node                setNodeSciencecase() Sets the current record's "NodeSciencecase" collection
 * @method Node                setPerson()          Sets the current record's "Person" collection
 * @method Node                setPerson5()         Sets the current record's "Person_5" collection
 * @method Node                setResource()        Sets the current record's "Resource" collection
 * @method Node                setResource7()       Sets the current record's "Resource_7" collection
 * @method Node                setResourceNode()    Sets the current record's "ResourceNode" collection
 * @method Node                setSciencecase()     Sets the current record's "Sciencecase" collection
 * 
 * @package    gwis
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseNode extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('node');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('num', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('url', 'string', 150, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => 'http://',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 150,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Institute', array(
             'local' => 'id',
             'foreign' => 'node_id'));

        $this->hasMany('NodePdsnode', array(
             'local' => 'id',
             'foreign' => 'node_id'));

        $this->hasMany('NodeSciencecase', array(
             'local' => 'id',
             'foreign' => 'node_id'));

        $this->hasMany('Person', array(
             'local' => 'id',
             'foreign' => 'node_id'));

        $this->hasMany('Person as Person_5', array(
             'local' => 'id',
             'foreign' => 'node_leading_id'));

        $this->hasMany('Resource', array(
             'local' => 'id',
             'foreign' => 'node_id'));

        $this->hasMany('Resource as Resource_7', array(
             'local' => 'id',
             'foreign' => 'node_id'));

        $this->hasMany('ResourceNode', array(
             'local' => 'id',
             'foreign' => 'node_id'));

        $this->hasMany('Sciencecase', array(
             'local' => 'id',
             'foreign' => 'node_id'));
    }
}