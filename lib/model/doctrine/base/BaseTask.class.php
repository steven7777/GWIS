<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Task', 'doctrine');

/**
 * BaseTask
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $person_id
 * @property string $name
 * @property string $description
 * @property boolean $is_public
 * @property integer $priority
 * @property enum $priority_old
 * @property boolean $is_done
 * @property date $done
 * @property enum $category
 * @property enum $topic
 * @property enum $level
 * @property Person $Person
 * 
 * @method integer getId()           Returns the current record's "id" value
 * @method integer getPersonId()     Returns the current record's "person_id" value
 * @method string  getName()         Returns the current record's "name" value
 * @method string  getDescription()  Returns the current record's "description" value
 * @method boolean getIsPublic()     Returns the current record's "is_public" value
 * @method integer getPriority()     Returns the current record's "priority" value
 * @method enum    getPriorityOld()  Returns the current record's "priority_old" value
 * @method boolean getIsDone()       Returns the current record's "is_done" value
 * @method date    getDone()         Returns the current record's "done" value
 * @method enum    getCategory()     Returns the current record's "category" value
 * @method enum    getTopic()        Returns the current record's "topic" value
 * @method enum    getLevel()        Returns the current record's "level" value
 * @method Person  getPerson()       Returns the current record's "Person" value
 * @method Task    setId()           Sets the current record's "id" value
 * @method Task    setPersonId()     Sets the current record's "person_id" value
 * @method Task    setName()         Sets the current record's "name" value
 * @method Task    setDescription()  Sets the current record's "description" value
 * @method Task    setIsPublic()     Sets the current record's "is_public" value
 * @method Task    setPriority()     Sets the current record's "priority" value
 * @method Task    setPriorityOld()  Sets the current record's "priority_old" value
 * @method Task    setIsDone()       Sets the current record's "is_done" value
 * @method Task    setDone()         Sets the current record's "done" value
 * @method Task    setCategory()     Sets the current record's "category" value
 * @method Task    setTopic()        Sets the current record's "topic" value
 * @method Task    setLevel()        Sets the current record's "level" value
 * @method Task    setPerson()       Sets the current record's "Person" value
 * 
 * @package    gwis
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseTask extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('task');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('person_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 60, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 60,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('is_public', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('priority', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => true,
             'primary' => false,
             'default' => '1',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('priority_old', 'enum', 9, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'very high',
              1 => 'high',
              2 => 'medium',
              3 => 'low',
              4 => 'very low',
             ),
             'primary' => false,
             'default' => 'very high',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 9,
             ));
        $this->hasColumn('is_done', 'boolean', null, array(
             'type' => 'boolean',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('done', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('category', 'enum', 12, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'bug fix',
              1 => 'modification',
              2 => 'new addition',
             ),
             'primary' => false,
             'default' => 'new addition',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 12,
             ));
        $this->hasColumn('topic', 'enum', 9, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'framework',
              1 => 'project',
             ),
             'primary' => false,
             'default' => 'project',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 9,
             ));
        $this->hasColumn('level', 'enum', 12, array(
             'type' => 'enum',
             'fixed' => 0,
             'unsigned' => false,
             'values' => 
             array(
              0 => 'structure',
              1 => 'presentation',
              2 => 'data',
             ),
             'primary' => false,
             'default' => 'structure',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 12,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Person', array(
             'local' => 'person_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}